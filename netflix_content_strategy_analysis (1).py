# -*- coding: utf-8 -*-
"""Netflix Content Strategy Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14AHj0VFNqSgWV57KtXg2ugdJ6oLANVqT
"""

# ðŸ“¦ Upload CSV file
from google.colab import files
uploaded = files.upload()

# ðŸ“š Libraries
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import plotly.io as pio
import io

# ðŸ“Š Plotly settings
pio.templates.default = "plotly_white"

# ðŸ“„ Read the uploaded file
filename = list(uploaded.keys())[0]
netflix_data = pd.read_csv(io.BytesIO(uploaded[filename]))

netflix_data.head()

# ðŸ§¼ Rename columns for easier access
netflix_data.columns = netflix_data.columns.str.strip().str.lower().str.replace(' ', '_')

# Convert 'hours_viewed' from string to float
netflix_data['hours_viewed'] = netflix_data['hours_viewed'].replace(',', '', regex=True).astype(float)

# Convert release_date to datetime
netflix_data['release_date'] = pd.to_datetime(netflix_data['release_date'], errors='coerce')
netflix_data['release_month'] = netflix_data['release_date'].dt.month
netflix_data['release_day'] = netflix_data['release_date'].dt.day_name()

content_type_viewership = netflix_data.groupby('content_type')['hours_viewed'].sum()

fig = go.Figure(data=[
    go.Bar(
        x=content_type_viewership.index,
        y=content_type_viewership.values,
        marker_color=['skyblue', 'salmon']
    )
])

fig.update_layout(
    title='Total Viewership Hours by Content Type (2023)',
    xaxis_title='Content Type',
    yaxis_title='Total Hours Viewed',
    height=500,
    width=800
)

fig.show()

language_viewership = netflix_data.groupby('language_indicator')['hours_viewed'].sum().sort_values(ascending=False)

fig = go.Figure(data=[
    go.Bar(
        x=language_viewership.index,
        y=language_viewership.values,
        marker_color='lightcoral'
    )
])

fig.update_layout(
    title='Total Viewership Hours by Language (2023)',
    xaxis_title='Language',
    yaxis_title='Total Hours Viewed',
    xaxis_tickangle=45,
    height=600,
    width=1000
)

fig.show()

monthly_viewership = netflix_data.groupby('release_month')['hours_viewed'].sum()

fig = go.Figure(data=[
    go.Scatter(
        x=monthly_viewership.index,
        y=monthly_viewership.values,
        mode='lines+markers',
        marker=dict(color='blue'),
        line=dict(color='blue')
    )
])

fig.update_layout(
    title='Monthly Viewership Trend (2023)',
    xaxis_title='Month',
    yaxis_title='Total Hours Viewed',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    height=600,
    width=1000
)

fig.show()

top_5_titles = netflix_data.nlargest(5, 'hours_viewed')
top_5_titles[['title', 'hours_viewed', 'language_indicator', 'content_type', 'release_date']]

pivot = netflix_data.pivot_table(index='release_month', columns='content_type', values='hours_viewed', aggfunc='sum')

fig = go.Figure()

for col in pivot.columns:
    fig.add_trace(go.Scatter(x=pivot.index, y=pivot[col], mode='lines+markers', name=col))

fig.update_layout(
    title='Monthly Viewership by Content Type',
    xaxis_title='Month',
    yaxis_title='Hours Viewed',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    height=600,
    width=1000
)

fig.show()

def get_season(month):
    if month in [12, 1, 2]: return 'Winter'
    elif month in [3, 4, 5]: return 'Spring'
    elif month in [6, 7, 8]: return 'Summer'
    else: return 'Fall'

netflix_data['release_season'] = netflix_data['release_month'].apply(get_season)

seasonal_viewership = netflix_data.groupby('release_season')['hours_viewed'].sum()
season_order = ['Winter', 'Spring', 'Summer', 'Fall']
seasonal_viewership = seasonal_viewership.reindex(season_order)

fig = go.Figure([
    go.Bar(x=seasonal_viewership.index, y=seasonal_viewership.values, marker_color='orange')
])

fig.update_layout(
    title='Seasonal Viewership (2023)',
    xaxis_title='Season',
    yaxis_title='Total Hours Viewed',
    height=500,
    width=800
)

fig.show()

monthly_releases = netflix_data['release_month'].value_counts().sort_index()
monthly_viewership = netflix_data.groupby('release_month')['hours_viewed'].sum()

fig = go.Figure()

fig.add_trace(go.Bar(
    x=monthly_releases.index,
    y=monthly_releases.values,
    name='Number of Releases',
    marker_color='goldenrod',
    opacity=0.7,
    yaxis='y1'
))

fig.add_trace(go.Scatter(
    x=monthly_viewership.index,
    y=monthly_viewership.values,
    name='Viewership Hours',
    mode='lines+markers',
    marker=dict(color='red'),
    yaxis='y2'
))

fig.update_layout(
    title='Monthly Releases vs Viewership',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(1, 13)),
        ticktext=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
    ),
    yaxis=dict(title='Number of Releases', side='left', showgrid=False),
    yaxis2=dict(title='Hours Viewed', overlaying='y', side='right', showgrid=False),
    height=600,
    width=1000
)

fig.show()

weekday_releases = netflix_data['release_day'].value_counts().reindex([
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
])

weekday_viewership = netflix_data.groupby('release_day')['hours_viewed'].sum().reindex([
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
])

fig = go.Figure()

fig.add_trace(go.Bar(
    x=weekday_releases.index,
    y=weekday_releases.values,
    name='Number of Releases',
    marker_color='blue',
    opacity=0.6,
    yaxis='y1'
))

fig.add_trace(go.Scatter(
    x=weekday_viewership.index,
    y=weekday_viewership.values,
    name='Viewership Hours',
    mode='lines+markers',
    marker=dict(color='red'),
    yaxis='y2'
))

fig.update_layout(
    title='Weekly Release Patterns vs Viewership',
    xaxis=dict(title='Day of the Week'),
    yaxis=dict(title='Number of Releases', side='left'),
    yaxis2=dict(title='Hours Viewed', overlaying='y', side='right'),
    height=600,
    width=1000
)

fig.show()

important_dates = pd.to_datetime([
    '2023-01-01', '2023-02-14', '2023-07-04', '2023-10-31', '2023-12-25'
])

holiday_releases = netflix_data[netflix_data['release_date'].apply(
    lambda x: any((x - date).days in range(-3, 4) for date in important_dates)
)]

holiday_releases[['title', 'release_date', 'hours_viewed']].sort_values('hours_viewed', ascending=False).head(10)